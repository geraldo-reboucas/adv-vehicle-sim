require 'find'
require 'set'
require 'pp'

HTML_EXTENSIONS = Set.new(['.htm', '.html'])

def html?(fname)
  ext = File.extname(fname)
  HTML_EXTENSIONS.include?(ext)
end

def list_files(dir)
  Dir.entries(dir).reduce([]) {|files, entry|
    path = File.expand_path(File.join(dir, entry))
    if entry == '.'
      files
    elsif entry == '..'
      files
    elsif File.file?(path)
      files << path
    elsif File.directory?(path)
      other_files = list_files(path)
      if other_files.empty? then files else files + other_files end
    end
  }
end

def html(fname, prefix=nil, template=nil)
  options = "-s -S"
  options += if template.nil? then "" else " --template=#{template}" end
  sh "pandoc #{options} #{prefix}#{fname}.md -o #{prefix}#{fname}.html"
end

def pdf(fname, prefix=nil, template=nil)
  options = "-s -S " +
    "--latex-engine=xelatex " +
    "--variable=mainfont:\"Palatino Linotype\" " +
    "--variable=sansfont:Arial " +
    "--variable=monofont:\"Courier New\" " +
    "--variable=fontsize:11pt " +
    "--variable=geometry:margin=1.0in"
  options += if template.nil? then "" else " --template=#{template}" end
  sh "pandoc #{options} #{prefix}#{fname}.md -o #{prefix}#{fname}.pdf"
end

def doc(fname, prefix=nil, template=nil)
  options = "-s -S"
  options += if template.nil? then "" else " --reference-docx=#{template}" end
  sh "pandoc #{options} #{prefix}#{fname}.md -o #{prefix}#{fname}.docx"
end

def html_to_markdown(fname)
  puts "\nProcessing: #{File.basename(fname)}"
  new_fname = fname.gsub(File.extname(fname), '.md')
  str = File.read(fname, :encoding =>'iso-8859-1:utf-8')
  encoding = str.match(/charset=(.*)\"/)
  encoding_str = if encoding.nil? then "" else "-f #{encoding[1]}" end
  options = "--smart --standalone --normalize --parse-raw"
  sh "iconv #{encoding_str} -t utf-8 \"#{fname}\" | pandoc --from html --to markdown #{options} -o \"#{new_fname}\""
end

desc "Serve this directory using a Python HTTP Server"
task :serve do
  sh "python -m SimpleHTTPServer 8000 &"
end

desc "List all *.htm and *.html files"
task :list_html do  
  files = list_files(".").select {|f| html?(f)}
  pp files
end

desc "HTML to markdown"
task :md do
  dir = '.'
  files = list_files(dir).select {|p| html?(p)}.map {|p| File.expand_path(p, dir)}
  files.each {|f|
    html_to_markdown(f)
  }
end

